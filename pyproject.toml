# pyproject.toml - Python project configuration

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "CTHarvester"
version = "0.2.3-beta.1"
description = "CT scan image processing and visualization tool"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "CTHarvester Contributors"}
]
keywords = ["ct-scan", "medical-imaging", "visualization", "3d-rendering"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    # GUI Framework
    "pyqt5>=5.15.0,<6.0.0",
    "pyopengl>=3.1.5,<4.0.0",
    "pyopengl-accelerate>=3.1.5,<4.0.0",
    "superqt>=0.6.0,<1.0.0",
    # Image Processing
    "pillow>=11.0.0,<12.0.0",
    "numpy>=2.0.0,<3.0.0",
    # Scientific Computing
    "pymcubes>=0.1.4,<1.0.0",
    "scipy>=1.10.0,<2.0.0",
    # Utilities
    "semver>=3.0.0,<4.0.0",
    "psutil>=7.0.0,<8.0.0",
    "pyyaml>=6.0.0,<7.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0,<9.0.0",
    "pytest-cov>=4.1.0,<8.0.0",
    "pytest-qt>=4.2.0,<5.0.0",
    "hypothesis>=6.0.0,<7.0.0",
    # Code Quality
    "black>=23.12.0,<26.0.0",
    "flake8>=6.1.0,<8.0.0",
    "pylint>=3.0.0,<4.0.0",
    # Type Checking
    "mypy>=1.7.0,<2.0.0",
    # Profiling
    "memory-profiler>=0.61.0,<1.0.0",
    # Utilities
    "isort>=5.12.0",
    "pre-commit>=3.3.3",
]
docs = [
    "sphinx>=7.1.2",
    "sphinx-rtd-theme>=1.3.0",
]
build = [
    "pyinstaller>=5.13.0",
    "maturin>=1.4.0,<2.0.0",
]
rust = [
    "maturin>=1.4.0,<2.0.0",
]

[project.urls]
Homepage = "https://github.com/jikhanjung/CTHarvester"
Documentation = "https://jikhanjung.github.io/CTHarvester"
Repository = "https://github.com/jikhanjung/CTHarvester"
"Bug Tracker" = "https://github.com/jikhanjung/CTHarvester/issues"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip = [".git", "__pycache__", "build", "dist", ".venv", "venv"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -ra
    --strict-markers
    --cov=.
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
"""
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
    "property: marks tests as property-based tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "setup.py",
    "build*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Still permissive for old code
check_untyped_defs = true      # Check function bodies even without annotations
ignore_missing_imports = true
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
    "scripts/",
    "tests/",
    "ui/widgets/.*\\.py$",  # Qt widgets have many type compatibility issues with PyQt5 stubs
    "ui/dialogs/progress_dialog\\.py$",  # Qt dialog with parent type issues
]

# Ignore Qt widgets - too many PyQt5 stub compatibility issues
[[tool.mypy.overrides]]
module = [
    "ui.widgets.*",
    "ui.dialogs.progress_dialog",
]
ignore_errors = true

# Gradually enforce stricter rules per module
[[tool.mypy.overrides]]
module = [
    "core.file_handler",
    "utils.image_utils",
    "utils.settings_manager",
    "utils.common",
    "utils.worker",
]
disallow_untyped_defs = true    # Require annotations in these modules
disallow_incomplete_defs = true

# Phase 3 complete: All UI handlers now fully typed
[[tool.mypy.overrides]]
module = [
    "ui.handlers.directory_open_handler",
    "ui.handlers.export_handler",
    "ui.handlers.settings_handler",
    "ui.handlers.thumbnail_creation_handler",
    "ui.handlers.view_manager",
]
disallow_untyped_defs = true    # Require all functions to have type annotations
disallow_incomplete_defs = true  # Require complete type annotations

# Pylint configuration
[tool.pylint.main]
ignore = ["CVS", ".git", "__pycache__", "build", "dist"]
jobs = 0  # Use all cores

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 7
max-attributes = 10
# Hypothesis (property-based testing) configuration
[tool.hypothesis]
max_examples = 100
derandomize = true
deadline = 500  # milliseconds
