name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Black (Code Formatting)
      run: |
        black --check --diff .
      continue-on-error: false

    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff .
      continue-on-error: false

    - name: Run Flake8 (Linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true

    - name: Run Pylint (Static Analysis)
      run: |
        pylint core/ utils/ ui/ --fail-under=7.0
      continue-on-error: true

    - name: Generate quality summary
      if: always()
      run: |
        echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Formatting & Style" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Black: Code formatting verified" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ isort: Import sorting verified" >> $GITHUB_STEP_SUMMARY
        echo "- ℹ️  Flake8: Linting completed" >> $GITHUB_STEP_SUMMARY
        echo "- ℹ️  Pylint: Static analysis completed" >> $GITHUB_STEP_SUMMARY

  test-coverage:
    name: Test Coverage Gate
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libxcb-xinerama0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xfixes0 \
          libxcb-shape0 \
          libxcb-cursor0 \
          qt5-qmake \
          qtbase5-dev \
          libqt5gui5 \
          libqt5core5a \
          libqt5widgets5

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-qt hypothesis

    - name: Run tests with coverage
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        xvfb-run -a -s "-screen 0 1024x768x24" \
          pytest tests/ \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=60 \
            -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./coverage.xml
        flags: quality-gate
        fail_ci_if_error: false

    - name: Coverage summary
      if: always()
      run: |
        echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f coverage.xml ]; then
          COVERAGE=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | grep -o '[0-9.]*')
          COVERAGE_PCT=$(echo "$COVERAGE * 100" | bc | cut -d'.' -f1)

          echo "📊 **Coverage**: ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$COVERAGE_PCT" -ge 60 ]; then
            echo "✅ Coverage meets minimum threshold (60%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage below minimum threshold (60%)" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run mypy
      run: |
        mypy --config-file pyproject.toml core/ utils/ || true
      continue-on-error: true

    - name: Type check summary
      if: always()
      run: |
        echo "## Type Checking Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ℹ️  Type hints checked in core modules" >> $GITHUB_STEP_SUMMARY
        echo "- core/file_handler.py" >> $GITHUB_STEP_SUMMARY
        echo "- core/thumbnail_generator.py" >> $GITHUB_STEP_SUMMARY
        echo "- utils/image_utils.py" >> $GITHUB_STEP_SUMMARY
        echo "- utils/settings_manager.py" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install bandit
      run: |
        pip install bandit[toml]

    - name: Run security scan
      run: |
        bandit -r core/ utils/ ui/ -ll -f json -o bandit-report.json || true
        bandit -r core/ utils/ ui/ -ll || true
      continue-on-error: true

    - name: Security summary
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f bandit-report.json ]; then
          echo "🔒 Security scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- Scanned: core/, utils/, ui/" >> $GITHUB_STEP_SUMMARY
          echo "- Severity: Medium and High issues only" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️  Security scan report not available" >> $GITHUB_STEP_SUMMARY
        fi

  quality-gate-summary:
    name: Quality Gate Summary
    needs: [code-quality, test-coverage, type-checking, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Generate final summary
      run: |
        echo "# 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All quality checks completed. See individual job results above." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Gates" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test Coverage: ${{ needs.test-coverage.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Type Checking: ${{ needs.type-checking.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
