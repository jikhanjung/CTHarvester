name: Reusable Build Workflow
on:
  workflow_call:
    inputs:
      build_number:
        required: true
        type: string

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Windows dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get Version String
        id: get_version
        shell: bash
        run: echo "VERSION=$(python -c 'from version import __version__; print(__version__)')" >> $GITHUB_OUTPUT

      - name: Debug Version String
        run: echo "Version string captured - ${{ steps.get_version.outputs.VERSION }}"

      - name: Download and Install Inno Setup
        shell: pwsh
        run: |
          $inno_url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
          $inno_installer = "innosetup-installer.exe"
          Invoke-WebRequest -Uri $inno_url -OutFile $inno_installer
          Start-Process -FilePath $inno_installer -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
          echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build Windows Executables and Installer
        shell: pwsh
        run: |
          $env:BUILD_NUMBER = "${{ inputs.build_number }}"
          python build.py
          # List output directories to debug
          echo "=== Listing InnoSetup directory ==="
          if (Test-Path "InnoSetup") {
            Get-ChildItem -Path "InnoSetup" -Recurse | Format-Table FullName
          }
          echo "=== Listing dist directory ==="
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" -Name
          }
          echo "=== Checking for installer ==="
          if (Test-Path "InnoSetup/Output") {
            echo "InnoSetup/Output exists:"
            Get-ChildItem -Path "InnoSetup/Output" -Name
          } else {
            echo "InnoSetup/Output does not exist"
          }

      - name: Zip Windows Installer or Portable Build
        shell: pwsh
        if: success()
        run: |
          # Check for installer in InnoSetup/Output/
          $installerFound = $false
          if (Test-Path "InnoSetup/Output/") {
            $installerPath = Get-ChildItem -Path "InnoSetup/Output/" -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($installerPath) {
              $zipFileName = "CTHarvester-Windows-Installer-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.zip"
              Compress-Archive -Path $installerPath.FullName -DestinationPath $zipFileName
              echo "Zipped installer to $zipFileName"
              $installerFound = $true
            }
          }
          
          # If no installer, create portable zip
          if (-not $installerFound) {
            echo "No installer found, creating portable zip"
            $zipFileName = "CTHarvester-Windows-Portable-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.zip"
            if (Test-Path "dist/CTHarvester") {
              Compress-Archive -Path "dist/CTHarvester/*" -DestinationPath $zipFileName
              echo "Created portable zip: $zipFileName"
            } elseif (Test-Path "dist/CTHarvester.exe") {
              Compress-Archive -Path "dist/*" -DestinationPath $zipFileName
              echo "Created portable zip: $zipFileName"
            } else {
              echo "ERROR: CTHarvester executable not found in dist/"
              exit 1
            }
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ctharvester-windows
          path: |
            CTHarvester-Windows-*.zip

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install macOS system dependencies
        run: |
          brew install qt5 create-dmg
          echo "export PATH=/usr/local/opt/qt5/bin:$PATH" >> ~/.bash_profile
          echo "export LDFLAGS=-L/usr/local/opt/qt5/lib" >> ~/.bash_profile
          echo "export CPPFLAGS=-I/usr/local/opt/qt5/include" >> ~/.bash_profile

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get Version String
        id: get_version
        shell: bash
        run: echo "VERSION=$(python -c 'from version import __version__; print(__version__)')" >> $GITHUB_OUTPUT

      - name: Debug Version String
        run: echo "Version string captured - ${{ steps.get_version.outputs.VERSION }}"

      - name: Build macOS application
        run: |
          export PATH=/usr/local/opt/qt5/bin:$PATH
          python build.py
        env:
          BUILD_NUMBER: ${{ inputs.build_number }}

      - name: Create macOS app bundle
        run: |
          if [ ! -d "dist/CTHarvester.app" ]; then
            mkdir -p "dist/CTHarvester.app/Contents/MacOS"
            cp -r dist/* "dist/CTHarvester.app/Contents/MacOS/" 2>/dev/null || true
          fi

      - name: Create macOS DMG
        run: |
          if [ -f "icons/CTHarvester.png" ]; then
            ICON_ARG="--icon icons/CTHarvester.png"
          elif [ -f "icon.png" ]; then
            ICON_ARG="--icon icon.png"
          else
            ICON_ARG=""
          fi
          create-dmg \
            --volname "CTHarvester Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --hide-extension "CTHarvester.app" \
            --hdiutil-verbose \
            "CTHarvester-macOS-Installer-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.dmg" \
            "dist/CTHarvester.app" || echo "DMG creation failed, but continuing"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ctharvester-macos
          path: |
            CTHarvester-macOS-Installer-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Linux system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxcb-xinerama0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xfixes0 \
            libxcb-shape0 \
            libxcb-cursor0 \
            qt5-qmake \
            qtbase5-dev \
            libqt5gui5 \
            libqt5core5a \
            libqt5widgets5 \
            libglut-dev \
            libglut3.12 \
            python3-opengl \
            fuse

      - name: Download linuxdeploy and appimagetool
        run: |
          curl -LO https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          curl -LO https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage appimagetool-x86_64.AppImage
          sudo mv linuxdeploy-x86_64.AppImage /usr/local/bin/linuxdeploy
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Get Version String
        id: get_version
        run: echo "VERSION=$(python -c 'from version import __version__; print(__version__)')" >> $GITHUB_OUTPUT

      - name: Build Linux executable
        run: |
          python build.py
        env:
          BUILD_NUMBER: ${{ inputs.build_number }}

      - name: Create Linux AppImage
        run: |
          # Check if packaging script exists
          if [ -f "packaging/linux/create_appimage.sh" ]; then
            chmod +x packaging/linux/create_appimage.sh
            packaging/linux/create_appimage.sh v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}
          else
            # Create a simple AppImage if no packaging script exists
            mkdir -p AppDir/usr/bin
            cp -r dist/* AppDir/usr/bin/
            
            # Create desktop entry
            cat > AppDir/CTHarvester.desktop <<EOF
[Desktop Entry]
Name=CTHarvester
Exec=CTHarvester
Icon=CTHarvester
Type=Application
Categories=Medical;Science;
EOF
            
            # Create AppRun script
            cat > AppDir/AppRun <<EOF
#!/bin/bash
HERE="\$(dirname "\$(readlink -f "\${0}")")"
exec "\${HERE}/usr/bin/CTHarvester" "\$@"
EOF
            chmod +x AppDir/AppRun
            
            # Create AppImage
            ARCH=x86_64 appimagetool AppDir CTHarvester-Linux-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.AppImage
          fi

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: ctharvester-linux
          path: |
            CTHarvester-Linux-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.AppImage
            build_linux/CTHarvester-Linux-v${{ steps.get_version.outputs.VERSION }}-build${{ inputs.build_number }}.AppImage