name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: ctharvester-windows
            asset_name: CTHarvester-windows.zip
          - os: macos-latest
            artifact_name: ctharvester-macos
            asset_name: CTHarvester-macos.zip
          - os: ubuntu-latest
            artifact_name: ctharvester-linux
            asset_name: CTHarvester-linux.tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install qt5
        export PATH=/usr/local/opt/qt5/bin:$PATH
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-xinerama0 libxcb-icccm4 libxcb-image0 \
          libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-xfixes0 libxcb-shape0 libxcb-cursor0 \
          qt5-qmake qtbase5-dev libqt5gui5 libqt5core5a \
          libqt5widgets5 libglut-dev libglut3.12 python3-opengl
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Download and Install Inno Setup (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $inno_url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $inno_installer = "innosetup-installer.exe"
        Invoke-WebRequest -Uri $inno_url -OutFile $inno_installer
        Start-Process -FilePath $inno_installer -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
    
    - name: Build executable and installer
      run: |
        python build.py
      env:
        BUILD_NUMBER: ${{ github.run_number }}
    
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path dist/* -DestinationPath ${{ matrix.asset_name }}
        if (Test-Path "InnoSetup/Output/CTHarvester_v*_Installer.exe") {
          Copy-Item "InnoSetup/Output/CTHarvester_v*_Installer.exe" "CTHarvester-installer.exe"
        }
    
    - name: Package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ -d "dist/CTHarvester.app" ]; then
          cd dist && zip -r ../${{ matrix.asset_name }} CTHarvester.app
        else
          cd dist && zip -r ../${{ matrix.asset_name }} *
        fi
    
    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist && tar -czf ../${{ matrix.asset_name }} *
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.asset_name }}
  
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -la artifacts/*/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ctharvester-windows/CTHarvester-windows.zip
        asset_name: CTHarvester-windows.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ctharvester-macos/CTHarvester-macos.zip
        asset_name: CTHarvester-macos.zip
        asset_content_type: application/zip
    
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ctharvester-linux/CTHarvester-linux.tar.gz
        asset_name: CTHarvester-linux.tar.gz
        asset_content_type: application/gzip