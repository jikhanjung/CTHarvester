name: Full Test Suite

on:
  # Run nightly at 2:00 UTC
  schedule:
    - cron: '0 2 * * *'
  # Allow manual trigger
  workflow_dispatch:
  # Run on release tags
  push:
    tags:
      - 'v*.*.*'

jobs:
  test-comprehensive:
    name: Comprehensive Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libxcb-xinerama0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xfixes0 \
          libxcb-shape0 \
          libxcb-cursor0 \
          qt5-qmake \
          qtbase5-dev \
          libqt5gui5 \
          libqt5core5a \
          libqt5widgets5 \
          libglut-dev \
          libglut3.12 \
          python3-opengl

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-full-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-full-
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-timeout pytest-xdist hypothesis

    - name: Run ALL tests (including slow tests)
      env:
        QT_QPA_PLATFORM: offscreen
        QT_DEBUG_PLUGINS: 0
      run: |
        xvfb-run -a -s "-screen 0 1024x768x24" \
          pytest tests/ \
            --ignore=tests/test_basic.py \
            -n auto \
            --cov=core \
            --cov=ui \
            --cov=utils \
            --cov=security \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=75 \
            --tb=short \
            --timeout=300 \
            -v 2>&1 | tee test_output_full.log

    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-full-${{ matrix.python-version }}
        path: |
          test_output_full.log
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        files: ./coverage.xml
        flags: full-tests
        name: codecov-full-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Generate comprehensive test summary
      if: always()
      shell: bash
      run: |
        echo "## 🧪 Full Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f test_output_full.log ]; then
          # Extract test counts
          PASSED=$(grep -o "[0-9]* passed" test_output_full.log | head -1 | grep -o "[0-9]*" || echo "0")
          FAILED=$(grep -o "[0-9]* failed" test_output_full.log | head -1 | grep -o "[0-9]*" || echo "0")
          SKIPPED=$(grep -o "[0-9]* skipped" test_output_full.log | head -1 | grep -o "[0-9]*" || echo "0")

          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "$PASSED" != "0" ]; then
            echo "✅ **Passed**: $PASSED" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$FAILED" != "0" ]; then
            echo "❌ **Failed**: $FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "$SKIPPED" != "0" ]; then
            echo "⏭️ **Skipped**: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Categories (All Included)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests: Core utilities, workers, image processing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration Tests: Thumbnail generation workflows" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Tests: File validation, path traversal prevention" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Performance Tests**: Benchmarks with small/medium/large datasets" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Stress Tests**: Error recovery, edge cases, robustness" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️  This suite includes ALL tests including slow performance and stress tests." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Test output log not found" >> $GITHUB_STEP_SUMMARY
        fi

  test-summary:
    name: Full Test Summary
    needs: test-comprehensive
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Generate final summary
      run: |
        echo "# 🎯 Full Test Suite Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Comprehensive testing across all Python versions completed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "- Python 3.11: ${{ needs.test-comprehensive.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python 3.12: ${{ needs.test-comprehensive.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python 3.13: ${{ needs.test-comprehensive.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scope" >> $GITHUB_STEP_SUMMARY
        echo "This run included:" >> $GITHUB_STEP_SUMMARY
        echo "- All unit and integration tests" >> $GITHUB_STEP_SUMMARY
        echo "- Performance benchmarks (slow)" >> $GITHUB_STEP_SUMMARY
        echo "- Stress and edge case tests (slow)" >> $GITHUB_STEP_SUMMARY
        echo "- Security validation tests" >> $GITHUB_STEP_SUMMARY
